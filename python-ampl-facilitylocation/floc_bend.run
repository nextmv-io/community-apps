# Load model and data
#model floc_bend.mod;
#data floc_ef.dat;

# Set options
option presolve 0;
# Solver options
#option solver gurobi;
option cplex_options 'presolve=0 dualopt';
option gurobi_options 'presolve=0 outlev=0 alg:rays=1';
option highs_options 'pre:solve=off alg:simplex=1';
# Display optoins
option omit_zero_rows 1; option display_eps .000001;

# Define suffix for storing dual rays
suffix dunbdd;

# Define Master and Sub problems
problem Master: facility_open, sub_variable_cost, total_cost, optimality_cut, feasibility_cut, sufficient_production_capacity; 
problem Sub: production, operating_cost, satisfying_customer_demand, facility_capacity_limits;

# Loop logic parameters
param epsilon := 0.00001;
param no_violation{SCENARIOS} binary, default 0;

# Initialzie variables and parameters
let {s in SCENARIOS} sub_variable_cost[s] := 0;
let nITER := 0;

# Start Bender's loop
repeat { 
   let nITER := nITER + 1;
   printf "\nITERATION %d\n\n", nITER;
   let {s in SCENARIOS} no_violation[s] := 0;

   # Loop through the scenarios and solve each subproblem and update dual prices for each scenario
   for {s in SCENARIOS} {
      let sub_scenario := s;
      solve Sub;
      # display _nvars;
      if Sub.result = "infeasible" then {
         let cut_type[nITER, s] := "feas";
         let {j in CUSTOMERS} customer_price[j,sub_scenario,nITER] := max(satisfying_customer_demand[j].dunbdd, 0);
         let {i in FACILITIES} facility_price[i,sub_scenario,nITER] := min(facility_capacity_limits[i].dunbdd, 0);  
         printf "%d: Feasibility cut added for scenario %s\n", nITER, s;
      }
      else if operating_cost > sub_variable_cost[s] + epsilon then {
         let cut_type[nITER, s] := "opt";
         let {j in CUSTOMERS} customer_price[j,sub_scenario,nITER] := max(satisfying_customer_demand[j].dual, 0);
         let {i in FACILITIES} facility_price[i,sub_scenario,nITER] := min(facility_capacity_limits[i].dual, 0);
         printf "%d: Optimality cut added for scenario %s\n", nITER, s;
      }
      else {
         let cut_type[nITER, s] := "none";
         let no_violation[s] := 1;
         printf "%d: No cut needed for scenario %s\n", nITER, s;
      }
   }

   # Check if we have optimal solution
   if sum{s in SCENARIOS} no_violation[s] == card(SCENARIOS) then break;
   # Reset no violation
   let {i in SCENARIOS} no_violation[i] := 0;

   # If not optimal, resolve master
   printf "\nSOLVING MASTER PROBLEM\n\n";
   solve Master;

   # Update the subproblem right-hand side with master solution
   let {i in FACILITIES} sub_facility_open[i] := round(facility_open[i]);
};

printf "\nOPTIMAL SOLUTION FOUND\nExpected cost = %f\n\n", total_cost;
display facility_open;
